# Security Scanning Pipeline
# Comprehensive security analysis including SAST, dependency scanning, and vulnerability assessment
# Duration: Security scanning typically takes 10-15 minutes

name: Security Scanning

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run daily at 2 AM UTC
    - cron: "0 2 * * *"
  workflow_dispatch:

env:
  DOTNET_VERSION: "8.0.x"

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # SAST Scanning
  static-analysis:
    name: Static Application Security Testing
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: csharp
          queries: security-extended

      - name: Restore dependencies
        run: dotnet restore Zeus.People.sln

      - name: Build solution
        run: |
          dotnet build Zeus.People.sln \
            --configuration Release \
            --no-restore

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Dependency Scanning
  dependency-scan:
    name: Dependency Vulnerability Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore Zeus.People.sln

      - name: Run dependency vulnerability scan
        run: |
          echo "# Dependency Vulnerability Report" > dependency-report.md
          echo "**Scan Date:** $(date)" >> dependency-report.md
          echo "" >> dependency-report.md

          # Check for vulnerable packages
          dotnet list package --vulnerable --include-transitive > vuln-scan.txt 2>&1

          if grep -q "has the following vulnerable packages" vuln-scan.txt; then
            echo "⚠️ **VULNERABILITIES FOUND**" >> dependency-report.md
            echo "" >> dependency-report.md
            echo "\`\`\`" >> dependency-report.md
            cat vuln-scan.txt >> dependency-report.md
            echo "\`\`\`" >> dependency-report.md
            exit 1
          else
            echo "✅ **NO VULNERABILITIES FOUND**" >> dependency-report.md
          fi

      - name: Upload dependency scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-scan-results
          path: |
            dependency-report.md
            vuln-scan.txt
          retention-days: 30

  # Container Security Scanning
  container-security:
    name: Container Security Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Build Docker image
        run: |
          # Create a Dockerfile if it doesn't exist
          if [ ! -f "Dockerfile" ]; then
            cat > Dockerfile << EOF
          FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS base
          WORKDIR /app
          EXPOSE 80
          EXPOSE 443

          FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
          WORKDIR /src
          COPY ["src/API/Zeus.People.API.csproj", "src/API/"]
          COPY ["src/Application/Zeus.People.Application.csproj", "src/Application/"]
          COPY ["src/Domain/Zeus.People.Domain.csproj", "src/Domain/"]
          COPY ["src/Infrastructure/Zeus.People.Infrastructure.csproj", "src/Infrastructure/"]
          RUN dotnet restore "src/API/Zeus.People.API.csproj"
          COPY . .
          WORKDIR "/src/src/API"
          RUN dotnet build "Zeus.People.API.csproj" -c Release -o /app/build

          FROM build AS publish
          RUN dotnet publish "Zeus.People.API.csproj" -c Release -o /app/publish

          FROM base AS final
          WORKDIR /app
          COPY --from=publish /app/publish .
          ENTRYPOINT ["dotnet", "Zeus.People.API.dll"]
          EOF
          fi

          docker build -t api:latest .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "api:latest"
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

      - name: Upload container scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: container-security-results
          path: trivy-results.sarif
          retention-days: 30

  # Infrastructure Security Scanning
  infrastructure-security:
    name: Infrastructure Security Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov security scan on Bicep
        uses: bridgecrewio/checkov-action@master
        with:
          directory: infra/
          framework: bicep,arm
          output_format: sarif
          output_file_path: checkov-infra-results.sarif

      - name: Upload Checkov results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov-infra-results.sarif

      - name: Run custom infrastructure security checks
        run: |
          echo "# Infrastructure Security Report" > infra-security-report.md
          echo "**Scan Date:** $(date)" >> infra-security-report.md
          echo "" >> infra-security-report.md

          # Check for common misconfigurations
          echo "## Security Checks" >> infra-security-report.md

          # Check for hardcoded secrets
          if grep -r "password\|secret\|key" infra/ --include="*.bicep" --include="*.json" | grep -v "KeyVault\|keyVault"; then
            echo "⚠️ Potential hardcoded secrets found in infrastructure files" >> infra-security-report.md
          else
            echo "✅ No hardcoded secrets detected" >> infra-security-report.md
          fi

          # Check for public access configurations
          if grep -r "publicAccess\|AllowBlobPublicAccess" infra/ --include="*.bicep"; then
            echo "⚠️ Public access configurations found - review carefully" >> infra-security-report.md
          else
            echo "✅ No public access configurations detected" >> infra-security-report.md
          fi

      - name: Upload infrastructure security results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: infrastructure-security-results
          path: |
            checkov-infra-results.sarif
            infra-security-report.md
          retention-days: 30

  # Secrets Scanning
  secrets-scan:
    name: Secrets Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE}}

      - name: Custom secrets pattern scan
        run: |
          echo "# Secrets Scan Report" > secrets-report.md
          echo "**Scan Date:** $(date)" >> secrets-report.md
          echo "" >> secrets-report.md

          # Custom patterns for common secrets
          PATTERNS=(
            "password[[:space:]]*=[[:space:]]*['\"][^'\"]*['\"]"
            "secret[[:space:]]*=[[:space:]]*['\"][^'\"]*['\"]"
            "apikey[[:space:]]*=[[:space:]]*['\"][^'\"]*['\"]"
            "connectionstring[[:space:]]*=[[:space:]]*['\"][^'\"]*['\"]"
          )

          SECRET_FOUND=false
          for pattern in "${PATTERNS[@]}"; do
            if grep -ri "$pattern" src/ tests/ --include="*.cs" --include="*.json" --include="*.config"; then
              SECRET_FOUND=true
            fi
          done

          if [ "$SECRET_FOUND" = true ]; then
            echo "⚠️ **POTENTIAL SECRETS DETECTED**" >> secrets-report.md
            echo "Review the findings above and ensure no actual secrets are committed." >> secrets-report.md
          else
            echo "✅ **NO SECRETS DETECTED**" >> secrets-report.md
          fi

      - name: Upload secrets scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: secrets-scan-results
          path: secrets-report.md
          retention-days: 30

  # Security Summary
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs:
      [
        static-analysis,
        dependency-scan,
        container-security,
        infrastructure-security,
        secrets-scan,
      ]
    if: always()

    steps:
      - name: Download all security artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./security-results

      - name: Generate security summary
        run: |
          cat > security-summary.md << EOF
          # Security Scanning Summary

          **Scan Date:** $(date)
          **Repository:** ${{ github.repository }}
          **Branch:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}

          ## Scan Results

          | Security Check | Status | Details |
          |----------------|--------|---------|
          | Static Application Security Testing (SAST) | ${{ needs.static-analysis.result == 'success' && '✅ PASSED' || '❌ FAILED' }} | CodeQL analysis completed |
          | Dependency Vulnerability Scan | ${{ needs.dependency-scan.result == 'success' && '✅ PASSED' || '❌ FAILED' }} | NuGet package vulnerability check |
          | Container Security Scan | ${{ needs.container-security.result == 'success' && '✅ PASSED' || '❌ FAILED' }} | Trivy container image scan |
          | Infrastructure Security Scan | ${{ needs.infrastructure-security.result == 'success' && '✅ PASSED' || '❌ FAILED' }} | Checkov Bicep template scan |
          | Secrets Scan | ${{ needs.secrets-scan.result == 'success' && '✅ PASSED' || '❌ FAILED' }} | GitLeaks and custom pattern scan |

          ## Security Recommendations

          1. **Regular Updates**: Keep all dependencies up to date
          2. **Secret Management**: Use Azure Key Vault for all secrets
          3. **Access Control**: Implement principle of least privilege
          4. **Monitoring**: Enable security monitoring and alerting
          5. **Code Review**: Ensure security-focused code reviews

          ## Next Steps

          - Review any failed security checks immediately
          - Address vulnerabilities in order of severity
          - Update security policies as needed
          - Schedule regular security assessments

          ---

          For detailed results, check the individual scan reports in the workflow artifacts.
          EOF

      - name: Upload security summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md
          retention-days: 90

      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('security-summary.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🔒 Security Scanning Results\n\n${summary}`
            });
