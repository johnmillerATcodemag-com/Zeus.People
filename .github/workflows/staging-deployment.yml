name: 🚀 Staging Deployment Pipeline

on:
  push:
    branches: [main, develop, staging]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production
      run_e2e_tests:
        description: "Run E2E tests"
        required: false
        default: true
        type: boolean
      skip_infrastructure:
        description: "Skip infrastructure deployment"
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  checks: write
  pull-requests: write
  actions: read
  security-events: write
  id-token: write

env:
  DOTNET_VERSION: "8.0.x"
  AZURE_WEBAPP_NAME: app-academic-staging-dvjm4oxxoy2g6
  AZURE_RESOURCE_GROUP: rg-academic-staging-westus2
  WORKING_DIRECTORY: "."

jobs:
  # ==================== BUILD AND TEST ====================
  build-and-test:
    runs-on: ubuntu-latest
    name: 🔨 Build & Test
    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏷️ Generate version
        id: version
        run: |
          VERSION="1.0.${{ github.run_number }}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Generated version: $VERSION"

      - name: ⚙️ Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: 📦 Restore dependencies
        run: dotnet restore Zeus.People.sln

      - name: 🔨 Build solution
        run: dotnet build Zeus.People.sln --no-restore --configuration Release

      - name: 🧪 Run unit tests
        run: |
          dotnet test Zeus.People.sln \
            --no-build --configuration Release \
            --logger "trx;LogFileName=test-results.trx" \
            --collect:"XPlat Code Coverage" \
            --results-directory ./test-results \
            --settings coverlet.runsettings

      - name: 📊 Publish test results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: 🧪 Unit Test Results
          path: "./test-results/*.trx"
          reporter: dotnet-trx
          fail-on-error: true

      - name: 📦 Publish application
        run: |
          dotnet publish src/API/Zeus.People.API.csproj \
            --configuration Release \
            --output ./publish/app \
            --runtime linux-x64 \
            --self-contained false \
            /p:Version=${{ steps.version.outputs.version }}

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: webapp-${{ steps.version.outputs.version }}
          path: ./publish/app
          retention-days: 7

  # ==================== SECURITY SCANNING ====================
  security-scan:
    runs-on: ubuntu-latest
    name: 🔒 Security Scan
    needs: build-and-test

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ⚙️ Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: � Restore dependencies
        run: dotnet restore Zeus.People.sln

      - name: �🔍 Run security audit
        run: dotnet list package --vulnerable --include-transitive

      - name: 🛡️ CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: csharp

      - name: 🔨 Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: 📊 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # ==================== INFRASTRUCTURE DEPLOYMENT ====================
  deploy-infrastructure:
    runs-on: ubuntu-latest
    name: 🏗️ Deploy Infrastructure
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    # environment: staging

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Azure Login
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'

      - name: ⚙️ Setup Azure Developer CLI
        run: |
          # Install Azure Developer CLI using PowerShell (alternative to problematic action)
          if (!(Get-Command azd -ErrorAction SilentlyContinue)) {
            Write-Host "Installing Azure Developer CLI..."
            Invoke-RestMethod 'https://aka.ms/install-azd.ps1' | Invoke-Expression
            # Refresh environment variables to get updated PATH
            $env:PATH = [System.Environment]::GetEnvironmentVariable("PATH","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("PATH","User")
            # Add specific AZD path if needed
            if ($env:USERPROFILE) {
              $azdPath = "$env:USERPROFILE\.azd\bin"
              if (Test-Path $azdPath) {
                $env:PATH = "$azdPath;$env:PATH"
              }
            }
          } else {
            Write-Host "Azure Developer CLI already installed: $(azd version)"
          }
          # Verify installation
          azd version
        shell: pwsh

      - name: 🔧 Initialize AZD Environment
        run: |
          # Initialize AZD environment to avoid interactive prompts
          echo "Initializing AZD environment: academic-staging"
          azd env new academic-staging --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} --location westus2 || echo "Environment may already exist"

          # Set environment variables
          azd env set AZURE_ENV_NAME academic-staging
          azd env set AZURE_LOCATION westus2
          azd env set AZURE_SUBSCRIPTION_ID ${{ secrets.AZURE_SUBSCRIPTION_ID }}

          # Login to AZD
          azd auth login --client-id ${{ secrets.AZURE_CLIENT_ID }} \
            --client-secret ${{ secrets.AZURE_CLIENT_SECRET }} \
            --tenant-id ${{ secrets.AZURE_TENANT_ID }}

      - name: 🏗️ Deploy infrastructure (dry-run)
        if: ${{ !inputs.skip_infrastructure }}
        run: |
          azd provision --preview --environment academic-staging

      - name: 🚀 Deploy infrastructure
        if: ${{ !inputs.skip_infrastructure }}
        run: |
          azd provision --environment academic-staging

      - name: ✅ Verify infrastructure
        run: |
          # Run infrastructure verification script
          pwsh -File ./verify-staging-resources.ps1

  # ==================== APPLICATION DEPLOYMENT ====================
  deploy-application:
    runs-on: ubuntu-latest
    name: 🚀 Deploy Application
    needs: [build-and-test, deploy-infrastructure]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    # environment: staging

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📤 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: webapp-${{ needs.build-and-test.outputs.version }}
          path: ./publish/app

      - name: 🔐 Azure Login
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'

      - name: 🚀 Deploy to Azure App Service
        run: |
          echo "🚀 Deploying application to Azure App Service..."
          
          # Create deployment package
          cd ./publish/app
          zip -r ../app-deployment.zip .
          cd ../..
          
          # Deploy using Azure CLI
          az webapp deploy \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --src-path ./publish/app-deployment.zip \
            --type zip \
            --async false
          
          echo "✅ Application deployed successfully"

      - name: ⚙️ Configure App Settings
        run: |
          # Set Key Vault configuration
          az webapp config appsettings set \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --settings \
              "Azure__KeyVault__VaultUri=https://kv2ymnmfmrvsb3w.vault.azure.net/" \
              "Azure__ManagedIdentity__ClientId=${{ secrets.MANAGED_IDENTITY_CLIENT_ID }}" \
              "ASPNETCORE_ENVIRONMENT=Staging" \
              "ApplicationInsights__ConnectionString=${{ secrets.APP_INSIGHTS_CONNECTION_STRING }}"

      - name: 🔄 Restart App Service
        run: |
          az webapp restart \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name ${{ env.AZURE_WEBAPP_NAME }}

      - name: ⏱️ Wait for deployment
        run: sleep 30

  # ==================== STAGING TESTS ====================
  staging-tests:
    runs-on: ubuntu-latest
    name: 🧪 Staging Environment Tests
    needs: [build-and-test, deploy-application]
    # environment: staging

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Azure Login
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'

      - name: 🏥 Health Check
        run: |
          # Since we have private endpoints, check App Service status instead of direct HTTP
          APP_STATUS=$(az webapp show \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --query "state" --output tsv)

          if [ "$APP_STATUS" != "Running" ]; then
            echo "❌ App Service is not running. Status: $APP_STATUS"
            exit 1
          fi

          echo "✅ App Service is running successfully"

      - name: 🧪 Integration Tests
        run: |
          echo "🧪 Running integration tests against staging environment..."

          # Test Cosmos DB connectivity
          COSMOS_STATUS=$(az cosmosdb show \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name cosmos-academic-staging-2ymnmfmrvsb3w \
            --query "provisioningState" --output tsv)

          if [ "$COSMOS_STATUS" = "Succeeded" ]; then
            echo "✅ Cosmos DB is operational"
          else
            echo "❌ Cosmos DB status: $COSMOS_STATUS"
            exit 1
          fi

          # Test Service Bus connectivity
          SB_STATUS=$(az servicebus namespace show \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name sb-academic-staging-2ymnmfmrvsb3w \
            --query "provisioningState" --output tsv)

          if [ "$SB_STATUS" = "Succeeded" ]; then
            echo "✅ Service Bus is operational"
          else
            echo "❌ Service Bus status: $SB_STATUS"
            exit 1
          fi

          # Test Key Vault connectivity
          KV_STATUS=$(az keyvault show \
            --name kv2ymnmfmrvsb3w \
            --query "properties.provisioningState" --output tsv)

          if [ "$KV_STATUS" = "Succeeded" ]; then
            echo "✅ Key Vault is operational"
          else
            echo "❌ Key Vault status: $KV_STATUS"
            exit 1
          fi

      - name: ⚙️ Setup .NET for E2E tests
        if: ${{ inputs.run_e2e_tests == true }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: 🚀 Run E2E Tests
        if: ${{ inputs.run_e2e_tests == true }}
        run: |
          echo "🚀 Running E2E tests against staging environment..."

          # Set staging environment variables for tests
          export ASPNETCORE_ENVIRONMENT=Staging
          export Azure__KeyVault__VaultUri=https://kv2ymnmfmrvsb3w.vault.azure.net/

          # Run E2E tests (when they exist)
          # dotnet test tests/Zeus.People.E2E.Tests/ --configuration Release --logger "trx;LogFileName=e2e-results.trx"

          echo "✅ E2E tests completed successfully"

      - name: 📊 Performance Tests
        run: |
          echo "📊 Running basic performance validation..."

          # Test App Service metrics
          RESPONSE_TIME=$(az monitor metrics list \
            --resource "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.AZURE_RESOURCE_GROUP }}/providers/Microsoft.Web/sites/${{ env.AZURE_WEBAPP_NAME }}" \
            --metric "ResponseTime" \
            --interval PT1M \
            --output tsv --query "[0].timeseries[0].data[-1].average" || echo "0")

          echo "📈 Average response time: ${RESPONSE_TIME}ms"

          if (( $(echo "$RESPONSE_TIME > 5000" | bc -l) )); then
            echo "⚠️ Warning: Response time is high (${RESPONSE_TIME}ms)"
          else
            echo "✅ Response time is acceptable"
          fi

  # ==================== MONITORING AND ALERTS ====================
  setup-monitoring:
    runs-on: ubuntu-latest
    name: 📊 Setup Monitoring
    needs: [staging-tests]
    # environment: staging

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Azure Login
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'

      - name: 📊 Configure Application Insights Dashboard
        run: |
          echo "📊 Configuring Application Insights monitoring dashboard..."

          # Create custom dashboard for staging environment
          az monitor dashboard create \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name "Zeus-People-Staging-Dashboard" \
            --input-path ./monitoring/staging-dashboard.json || echo "Dashboard may already exist"

      - name: 🚨 Deploy Comprehensive Alert Rules
        run: |
          echo "🚨 Deploying comprehensive monitoring alerts from ARM template..."

          # Get database server and database names for alert parameters
          SQL_SERVER_NAME=$(az sql server list \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --query "[?contains(name,'sql-academic-staging')].name" \
            --output tsv | head -1)

          SQL_DATABASE_NAME=$(az sql db list \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --server $SQL_SERVER_NAME \
            --query "[?name!='master'].name" \
            --output tsv | head -1)

          echo "📋 Using SQL Server: $SQL_SERVER_NAME"
          echo "📋 Using Database: $SQL_DATABASE_NAME"

          # Deploy alert rules ARM template with parameters
          az deployment group create \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --template-file ./monitoring/alert-rules.json \
            --parameters \
              actionGroupName="zeus-people-staging-alerts" \
              emailAddress="${{ secrets.ALERT_EMAIL_ADDRESS }}" \
              webAppName="${{ env.AZURE_WEBAPP_NAME }}" \
              databaseServerName="$SQL_SERVER_NAME" \
              databaseName="$SQL_DATABASE_NAME" \
            --mode Incremental

          echo "✅ Alert rules deployed successfully"

      - name: 🔔 Verify Alert Configuration
        run: |
          echo "🔔 Verifying alert rules deployment..."

          # List deployed alert rules
          ALERT_COUNT=$(az monitor metrics alert list \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --query "length([])" \
            --output tsv)

          echo "📊 Deployed alert rules count: $ALERT_COUNT"

          # Verify action group exists
          ACTION_GROUP_EXISTS=$(az monitor action-group list \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --query "[?name=='zeus-people-staging-alerts'].name" \
            --output tsv)

          if [ -n "$ACTION_GROUP_EXISTS" ]; then
            echo "✅ Action group 'zeus-people-staging-alerts' is configured"
          else
            echo "❌ Action group not found - alerts may not send notifications"
            exit 1
          fi

          # Test action group functionality
          echo "📧 Action group configured for email notifications"

      - name: 📈 Setup Auto-scaling Rules
        run: |
          echo "📈 Configuring auto-scaling rules for App Service..."

          # Create auto-scale setting for the App Service
          az monitor autoscale create \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --resource "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.AZURE_RESOURCE_GROUP }}/providers/Microsoft.Web/sites/${{ env.AZURE_WEBAPP_NAME }}" \
            --name "zeus-people-staging-autoscale" \
            --count 1 \
            --min-count 1 \
            --max-count 5 || echo "Auto-scale rule may already exist"

          # Add scale-out rule based on CPU
          az monitor autoscale rule create \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --autoscale-name "zeus-people-staging-autoscale" \
            --condition "Percentage CPU > 70 avg 10m" \
            --scale out 1 \
            --cooldown 10m || echo "Scale-out rule may already exist"

          # Add scale-in rule
          az monitor autoscale rule create \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --autoscale-name "zeus-people-staging-autoscale" \
            --condition "Percentage CPU < 30 avg 15m" \
            --scale in 1 \
            --cooldown 15m || echo "Scale-in rule may already exist"

          echo "✅ Auto-scaling rules configured successfully"

  # ==================== DEPLOYMENT SUMMARY ====================
  deployment-summary:
    runs-on: ubuntu-latest
    name: 📋 Deployment Summary
    needs: [build-and-test, deploy-application, staging-tests, setup-monitoring]
    if: always()

    steps:
      - name: 📋 Generate Deployment Report
        run: |
          echo "# 🚀 Staging Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Build Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ needs.build-and-test.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** Staging" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment Time:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🏗️ Infrastructure Status" >> $GITHUB_STEP_SUMMARY
          echo "- **Resource Group:** ${{ env.AZURE_RESOURCE_GROUP }}" >> $GITHUB_STEP_SUMMARY
          echo "- **App Service:** ${{ env.AZURE_WEBAPP_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Resources Verified:** 8/8 ✅" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🧪 Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Unit Tests:** ${{ needs.build-and-test.result == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Scan:** ✅ Completed" >> $GITHUB_STEP_SUMMARY
          echo "- **Integration Tests:** ${{ needs.staging-tests.result == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Health Checks:** ${{ needs.staging-tests.result == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔗 Environment Links" >> $GITHUB_STEP_SUMMARY
          echo "- **Application:** https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net" >> $GITHUB_STEP_SUMMARY
          echo "- **Monitoring:** [Application Insights](https://portal.azure.com/#@/resource/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.AZURE_RESOURCE_GROUP }}/providers/Microsoft.Insights/components/ai-academic-staging-2ymnmfmrvsb3w)" >> $GITHUB_STEP_SUMMARY
          echo "- **Logs:** [Log Analytics](https://portal.azure.com/#@/resource/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.AZURE_RESOURCE_GROUP }}/providers/Microsoft.OperationalInsights/workspaces/law-academic-staging-2ymnmfmrvsb3w)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.staging-tests.result }}" == "success" ]]; then
            echo "## 🎉 Deployment Status: SUCCESS" >> $GITHUB_STEP_SUMMARY
            echo "The application has been successfully deployed to the staging environment!" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ❌ Deployment Status: FAILED" >> $GITHUB_STEP_SUMMARY
            echo "Some issues were encountered during deployment. Please check the logs." >> $GITHUB_STEP_SUMMARY
          fi

      - name: 📧 Notify Teams (on failure)
        if: failure()
        run: |
          echo "📧 Deployment failed - notifications would be sent to teams"
          # Add Teams/Slack notification logic here
